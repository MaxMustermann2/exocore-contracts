name: Update CI Status Comment
description: Posts or updates a status comment on a pull request.
inputs:
  workflow-conclusion:
    description: 'The conclusion of the parent workflow (success, failure, or running).'
    required: true
  workflow-url:
    description: 'The URL to the parent workflow run.'
    required: true
  workflow-name:
    description: 'The name of the CI workflow that triggered this update.'
    required: true
  github-token:
    description: 'The GitHub token to use for making API requests.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Echo Workflow Details
      shell: bash
      run: |
        echo "Workflow conclusion: ${{ inputs.workflow-conclusion }}"
        echo "Workflow name: ${{ inputs.workflow-name }}"
        echo "Workflow URL: ${{ inputs.workflow-url }}"
    - name: Dump GitHub context
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Comment on Pull Requests
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const workflowConclusion = "${{ inputs.workflow-conclusion }}";
          const workflowRunUrl = "${{ inputs.workflow-url }}";
          const workflowName = "${{ inputs.workflow-name }}";
          const pullRequests = context.payload.workflow_run.pull_requests;

          if (pullRequests.length === 0) {
            console.log('No pull requests associated with this workflow run.');
          } else {
            for (const pr of pullRequests) {
              try {
                const existingComments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                });

                const existingComment = existingComments.data.find(comment =>
                  comment.body.includes(`The ${workflowName} workflow`)
                );

                let commentBody;

                if (workflowConclusion === 'running') {
                  commentBody = `üîÑ The ${workflowName} workflow is currently running. Check the [workflow run](${workflowRunUrl}) for progress.`;
                } else if (workflowConclusion === 'failure') {
                  commentBody = `‚ö†Ô∏è The ${workflowName} workflow has failed! Check the [workflow run](${workflowRunUrl}) for details.`;
                } else if (workflowConclusion === 'success') {
                  commentBody = `‚úÖ The ${workflowName} workflow has completed successfully. Check the [workflow run](${workflowRunUrl}) for details.`;
                } else if (workflowConclusion === 'skipped') {
                  commentBody = `‚è≠Ô∏è The ${workflowName} workflow was skipped. Check the [workflow run](${workflowRunUrl}) for details.`;
                } else {
                  commentBody = `‚ùì The ${workflowName} workflow has completed with an unknown status. Check the [workflow run](${workflowRunUrl}) for details.`;
                }
                if (existingComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: commentBody,
                  });
                } else {
                  await github.rest.issues.createComment({
                    issue_number: pr.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentBody,
                  });
                }
              } catch (error) {
                console.error(`Failed to comment on PR #${pr.number}: ${error.message}`);
              }
            }
          }
